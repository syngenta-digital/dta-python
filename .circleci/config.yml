version: 2.1
orbs:
    aws-cli: circleci/aws-cli@1.2.1
    slack: circleci/slack@3.4.2
commands:
    pipenv-install-dev:
        steps:
            - run: python3 -m pip install pipenv
            - run: python3 -m pipenv install --dev
    pipenv-install:
        steps:
            - run: python3 -m pip install pipenv
            - run: python3 -m pipenv install
    python-lint:
        steps:
            - run: mkdir coverage && mkdir coverage/lint || exit 0
            - run: python3 -m pipenv run lint | python3 -m pipenv run pylint_report.py > ./coverage/lint/report.html || exit 0
            - store_artifacts:
                path: ./coverage/lint/report.html
    python-test:
        steps:
            - run: sudo rm -f /etc/boto.cfg
            - run: pipenv run test
    python-report:
        steps:
            - run: sudo rm -f /etc/boto.cfg
            - run: pipenv run coverage
            - store_test_results:
                path: ./coverage/reports
    pypi-setup:
        steps:
            - run: echo -e "[pypi]" >> ~/.pypirc
            - run: echo -e "username = __token__" >> ~/.pypirc
            - run: echo -e "password = $PYPI_TOKEN" >> ~/.pypirc
    pypi-deploy:
        steps:
            - run: python3 -m pip install --user --upgrade setuptools wheel
            - run: python3 setup.py sdist bdist_wheel
            - run: python3 -m pip install --user --upgrade twine
            - run: python3 -m twine upload dist/*
    slack-status:
        steps:
            - slack/status:
                mentions: '${CIRCLE_USERNAME}, version=$CIRCLE_TAG'
    slack-error:
        steps:
            - slack/status:
                fail_only: true
                mentions: '${CIRCLE_USERNAME}'
jobs:
    install-build-test:
        - image: cimg/python:3.8.6
        -
            image: amazon/dynamodb-local
            command: -jar DynamoDBLocal.jar -inMemory -port 4000
            environment:
                - AWS_ACCESS_KEY_ID=0
                - AWS_SECRET_ACCESS_KEY=0
                - AWS_DEFAULT_REGION=us-east-2
        -
            image: neo4j:3.5.3-enterprise
            hostname: neo4j
            container_name: neo4j
            ports:
                - 7474:7474
                - 7687:7687
            volumes:
                - ./.neo4j/conf:/conf
                - ./.neo4j/logs:/logs
                - ./.neo4j/plugins:/plugins
                - ./.neo4j/data:/data
                - ./.neo4j/import:/import
            environment:
                - NEO4J_dbms_memory_pagecache_size=1G
                - NEO4J_dbms.memory.heap.initial_size=1G
                - NEO4J_dbms_memory_heap_max__size=1G
                - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
                - NEO4J_AUTH=neo4j/password
        -
            image: postgres:11.9
            hostname: postgres-local
            container_name: postgres-local
            restart: always
            volumes:
                - ./.postgres/data:/var/lib/postgresql/data
            ports:
                - 5439:5439
            environment:
                POSTGRES_USER: valet
                POSTGRES_PASSWORD: CS%FYaXh6Va+Dzm7
                POSTGRES_DB: normalized
        steps:
            - checkout
            - aws-cli/setup
            - run-docker
            - pyenv-install
            - pipenv-install-dev
            - python-lint
            - python-test
            - python-report
            - slack-error
    install-build-deploy:
        docker:
            - image: cimg/python:3.8
        steps:
            - checkout
            - pipenv-install
            - pypi-setup
            - pypi-deploy
            - slack-status
workflows:
    install-build-deploy:
        jobs:
            - install-build-deploy:
                context:
                    - tools-cicd
                    - pypi-token
                filters:
                    tags:
                        only: /.*/
                    branches:
                        ignore: /.*/
    install-build-test:
        jobs:
            - install-build-test:
                context:
                    - tools-cicd
                    - pypi-token
                filters:
                    tags:
                        ignore: /.*/
                    branches:
                        ignore: /dependabot.*/
